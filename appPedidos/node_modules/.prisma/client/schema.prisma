generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Usuario {
  id                   String               @id @default(auto()) @map("_id") @db.ObjectId
  nombreCompleto       String
  contrase√±a          String
  rol                  String // "Cliente", "Repartidor", "Admin"
  direccion            String
  telefono             Int
  cedula               Int
  email                String               @unique
  vehiculo             String? // "Moto", "Bicicleta" - Solo para repartidores
  resetToken           String?
  resetTokenExpiry     String?
  historialDirecciones HistorialDireccion[]
  pedidosCliente       Pedido[]             @relation("cliente")
  pedidosRepartidor    Pedido[]             @relation("repartidor")
  mensajesEnviados     Mensaje[]            @relation("emisor")
  mensajesRecibidos    Mensaje[]            @relation("receptor")

  @@map("Usuarios")
}

type HistorialDireccion {
  comuna              Int
  barrio              String
  direccionEspecifica String
}

model Pedido {
  id               String           @id @default(auto()) @map("_id") @db.ObjectId
  estado           String // "Pendiente", "En_Camino", "Entregado"
  total            Float
  usuarioId        String           @db.ObjectId
  usuario          Usuario          @relation("cliente", fields: [usuarioId], references: [id])
  direccionEntrega Json
  repartidorId     String           @db.ObjectId
  repartidor       Usuario          @relation("repartidor", fields: [repartidorId], references: [id])
  fechaDeCreacion  DateTime
  productos        ProductoPedido[]
  mensajes         Mensaje[]
  calificacion     Calificacion?

  @@map("Pedidos")
}

type ProductoPedido {
  productoId String @db.ObjectId
  cantidad   Int
}

model Restaurante {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  nombre      String
  ubicaciones Ubicacion[]
  productos   Producto[]

  @@map("Restaurantes")
}

type Ubicacion {
  sucursalId String @db.ObjectId
  comuna     String
}

model Producto {
  id               String      @id @default(auto()) @map("_id") @db.ObjectId
  nombre           String
  precio           Float
  especificaciones String
  restauranteId    String      @db.ObjectId
  restaurante      Restaurante @relation(fields: [restauranteId], references: [id])

  @@map("Productos")
}

model Calificacion {
  id                     String  @id @default(auto()) @map("_id") @db.ObjectId
  calificacionRepartidor Int     @db.Int
  calificacionPedido     Int     @db.Int
  comentarios            String?
  pedidoId               String  @unique @db.ObjectId
  pedido                 Pedido  @relation(fields: [pedidoId], references: [id])

  @@map("Calificaciones")
}

model Mensaje {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  pedidoId          String   @db.ObjectId
  pedido            Pedido   @relation(fields: [pedidoId], references: [id])
  usuarioEmisorId   String   @db.ObjectId
  usuarioEmisor     Usuario  @relation("emisor", fields: [usuarioEmisorId], references: [id])
  usuarioReceptorId String   @db.ObjectId
  usuarioReceptor   Usuario  @relation("receptor", fields: [usuarioReceptorId], references: [id])
  texto             String
  fechaEnvio        DateTime

  @@map("Mensajes")
}
